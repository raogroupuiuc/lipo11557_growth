getwd()
setwd("D:/Box Sync/Manuscripts/01 - Writing - 2021 LS sugars RNAseq/lipo11557_growth/Scripts")
#
# x <- c("edgeR", "affycoretools", "limma", "gplots", "rgl", "Glimma", "sva",
#        "WGCNA")
# BiocManager::install("PCAtools")
options(stringsAsFactors = F)
library(edgeR)
#library(biomaRt)
library(affycoretools)
library(limma)
library(gplots)
library(rgl)
library(Glimma)
library(rtracklayer)
library(sva)
library(ggplot2)
library(WGCNA)
library(PCAtools)
rm(list = ls())
targets <- readTargets("input/Targets_Final_LIPO.txt")
targets$col <- as.numeric(factor(targets$Trt))
targets$Label <- paste(targets$Species, targets$Trt, targets$Rep, sep=".")
rownames(targets) <- targets$Label
ReadFate <- dplyr::select(targets,QCfiltered:in.a.gene)
rownames(ReadFate) <- rownames(targets)
ReadFate <- ReadFate/targets$Total *100
rowSums(ReadFate)
apply(ReadFate, 2, summary)
ReadFate$Sample = targets$Label
df <- tidyr::gather(ReadFate, "Fate", "pct", 1:6)
df$Fate <- factor(df$Fate, levels = unique(df$Fate), ordered = TRUE)
x11(10,6)
ggplot(data=df, aes(x=Sample, y=pct, fill=Fate)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ggtitle("Read Fate")+ ylab("Percentage")+
ylim(0, 100)
# x11(w = 10, h = 6)
setEPS()
postscript("results/Readfates.eps", width = 10, height = 6)
par(mar=c(6,4,4,1))
barplot(t(ReadFate[,1:6]), col=1:6,las=2, legend.text = F,beside=T,
ylab = "Percent of total reads", main = "Read fates per sample", cex.names = 0.7,ylim=c(0,110),
names.arg = targets$Label, add=F)
abline(h = seq(0,100, by = 20), col = "gray")
barplot(t(ReadFate[,1:6]), col=1:6,las=2, legend.text = F,beside=T,
ylab = "Percent of total reads", main = "Read fates per sample", cex.names = 0.7,ylim=c(0,110),
names.arg = targets$Label, add=T)
legend ("topright", legend = colnames( ReadFate[,1:6]), col = 1:6, fill = 1:6, ncol = 6 )
d <- readDGE(targets$files, path="input/featcounts/" ,labels=targets$Label,
comment.char="#",header=T,columns = c(1,7), group=targets$Trt)
dim(d)
head(d$counts)
tail(d$counts)
gtf0 <- import("input/genome/Lipst1_1_GeneCatalog_genes_20110609.gtf")
gtf0
table(gtf0$type)
gtf1 <- gtf0[gtf0$type == "exon"]
gtf1
length(unique(gtf1$gene_id))
#8192
length(unique(gtf1$transcript_id))
gtf2 <- gtf1[!duplicated(gtf1$gene_id)]
gtf2
sum(is.na(gtf2$transcriptId))
table(gtf2$source)
gtf3 <- gtf0[gtf0$type == "CDS"]
gtf3 <- gtf3[!duplicated(gtf3$gene_id)]
gtf3
all.equal(gtf2$gene_id, gtf3$gene_id)
gtf2$proteinId <- gtf3$proteinId
all.equal(gtf2$gene_id, rownames(d$counts))
d$genes <- mcols(gtf2)[,c("gene_id", "proteinId")]
head(d$gene)
ec.kegg <- read.delim("input/genome/Lipst1_1_GeneCatalog_proteins_20110609_KEGG.tab")
dim(ec.kegg)
#3741    9
head(ec.kegg)
sum(ec.kegg$X.proteinId %in% d$genes$proteinId)
sum(!ec.kegg$X.proteinId %in% d$genes$proteinId)
sum(d$genes$proteinId %in% ec.kegg$X.proteinId)
sum(duplicated(ec.kegg$X.proteinId))
View(ec.kegg)
ec.kegg$ecNum <- gsub("^\\s+|\\s+$", "", ec.kegg$ecNum)
ec.kegg$definition <- gsub("^\\s+|\\s+$", "", ec.kegg$definition)
ec.kegg$pathway <- gsub("^\\s+|\\s+$", "", ec.kegg$pathway)
ec.kegg$pathway_class <- gsub("^\\s+|\\s+$", "", ec.kegg$pathway_class)
ec.kegg$pathway_type <- gsub("^\\s+|\\s+$", "", ec.kegg$pathway_type)
table(ec.kegg$pathway_type)
table(ec.kegg$pathway_class)
ec.part <- ec.kegg[,c(1:3)]
dim(ec.part)
#3741    3
ec.part <- ec.part[!duplicated(paste(ec.part$X.proteinId, ec.kegg$ecNum)),]
dim(ec.part)
sum(duplicated (ec.part$X.proteinId))
ec.part$X.proteinId <- as.character(ec.part$X.proteinId)
d$genes <- as.data.frame(d$genes)
d$genes <- dplyr::left_join(d$genes, ec.part, by = c("proteinId" = "X.proteinId"))
head(d$genes)
sum(!is.na(d$genes$ecNum))
head(ec.kegg)
kegg.part <- ec.kegg[,c(1, 7:9)]
head(kegg.part)
sum(is.na(kegg.part$pathway))
#0
sum(kegg.part$pathway == "\\N")
#remove these
kegg.part <- kegg.part[kegg.part$pathway != "\\N",]
dim(kegg.part)
sum(duplicated(paste(kegg.part$X.proteinId, kegg.part$pathway)))
table(table(kegg.part$X.proteinId))
length(grep(";", kegg.part$pathway))
kegg.part2 <- tapply(kegg.part$pathway, list(kegg.part$X.proteinId), function(x) paste(unique(x), collapse = "; "))
head(kegg.part2)
d$genes$KEGG <- kegg.part2[d$genes$proteinId]
head(d$genes)
sum(!is.na(d$genes$KEGG))
rm(gtf0, gtf1, gtf2, gtf3)
save.image("20210406.RData")
range(rowSums(d$counts))
# 0 1247512
max(rowSums(d$counts))/sum(d$counts)
#maxium count percentage of each library
x11()
apply(d$counts,2,function(x){max(x)/sum(x)}) %>%
barplot(las=2,col=targets$col,main="maxium count percentage of each library", cex.axis = 0.8)
abline(h=mean(apply(d$counts,2,function(x){max(x)/sum(x)})))
x11(20,20)
#jpeg("library_size.jpeg", width = 7, height = 4, units = "in", res = 300, quality = 100)
barplot(d$samples$lib.size/1e6,las=2, main = "Number of reads in genes (individual lib size)",
ylab = "millions of reads", col=targets$col,names.arg = targets$Label, cex.names = 0.9)
abline(h=mean(d$samples$lib.size/1e6),col="blue")
# genes with no reads in all samples
d$counts[apply(d$counts,1,sum)==0,] %>%nrow()
#  87
# total gene number:
nrow(d$counts)
# genes with reads in all samples
d$counts[apply(d$counts,1,sum)!=0,] %>%nrow()
# detecting trends between library size and gene with 0 counts
x11()
plot(d$samples$lib.size/1e6,apply(d$counts==0,2,sum),
xlab="Library Size (million)", ylab="number genes of zero count",
col=targets$col, pch=16)
d <- calcNormFactors(d)
x11(20,15)
barplot(d$samples$norm.factors,col=targets$col,las=2,names.arg = targets$Label, main="normalization factor",cex.names=0.8)
abline(h=1, lty=2)
summary(d$samples$lib.size/1e6)
#calculate counts per million of reads per kilobase per million
logCPM <- cpm(d, log=T, prior.count = 3)
#CPM density plot
x11(20,20)
plotDensities(logCPM,group=d$samples$group,col=as.numeric(unique(targets$col)),legend="topright")
glMDSPlot(logCPM, top = 5000, gene.selection="pairwise",  groups =d$samples$group,
labels = targets$Label, html = "MDSclustering_LIPO_BeforeFiltering")
x11(10,6)
unique_index <- rowSums(logCPM>log2(0.5))==1
barplot(colSums((logCPM>log2(0.5))[unique_index,]), col = targets$col, names.arg = targets$Label,
las=2, cex.names=0.8, main=paste0("number of unique genes out of ", nrow(logCPM)))
#frequency of number of samples larger than 1 cpm
x11()
hist(rowSums(logCPM > log2(1)))
# the actual number
table(rowSums(logCPM > log2(1)))
#   0    1    2    3    4    5    6    7    8    9
# 535   85   64   70   46   54   66   70  105 7097
# how many genes has 1 cpms in at least 3 samples?
sum(rowSums(logCPM>log2(1))>=3)
#7508
#the precentage
mean(rowSums(logCPM>log2(1))>=3)
#0.9165039
#### Filtering ####
# use 0.5 cpm in at least 4 samples as a criteria
filter_index <- rowSums(logCPM>log2(1))>=3
#filtering d object
d.filt <- d[filter_index,,keep.lib.size=F]
dim(d)
#8192    9
dim(d.filt)
#7508    9
# make sure libs was not messed up
range(d.filt$samples$lib.size/d$samples$lib.size)
# 0.9997932 0.9999144
#redo TMM normalization
d.filt <- calcNormFactors(d.filt)
x11()
barplot(d.filt$samples$norm.factors,col=targets$col,las=2,names.arg = targets$Label, main="filterd normalization factor",cex.names=0.9)
abline(h=1, lty=2)
#same, Xyl lower
all.equal(d.filt$samples$norm.factors,d$samples$norm.factors)
#"Mean relative difference: 0.002573549"
x11()
plot(d.filt$samples$norm.factors,d$samples$norm.factors, col=targets$col)
abline(0,1)
cor(d.filt$samples$norm.factors,d$samples$norm.factors)
#  0.9993071
#recalculate CPM ####
logCPM.filt <- cpm(d.filt, log = T, prior.count = 3)
#
#density plot
x11()
plotDensities(logCPM.filt,group=d$samples$group,col=as.numeric(unique(targets$col)) )
#Cel has higher peak > 5
# clustering analysis
x11(width = 20 , height = 10 )
hclust( dist( t(logCPM.filt ) ), method = "average" ) %>%
plot( hang = -1, main = "CPM after filtering", sub = "", xlab = "", cex = 0.9 )
# no issue
# PCA ####
x11( w =5, h = 6)
test_new <- pca(logCPM.filt)
postscript("results/PCA.eps", width = 5, height = 6)
biplot(test_new, xlim = c(-75,50), ylim = c(-50,50),
lab = d.filt$samples$group,
pointSize = 4, gridlines.major = FALSE, gridlines.minor = FALSE)
dev.off()
dev.off()
#### Design matrix ####
#one-way anova
group <- factor(d$samples$group, levels=c("Glu", "Cel", "Xyl"))
design <- model.matrix(~group)
colnames(design)[-1] <- paste0(levels(group)[-1], "_vs_", levels(group)[1])
design
#   (Intercept) Cel_vs_Glu Xyl_vs_Glu
# 1           1          1          0
# 2           1          1          0
# 3           1          1          0
# 4           1          0          0
# 5           1          0          0
# 6           1          0          0
# 7           1          0          1
# 8           1          0          1
# 9           1          0          1
fit <- lmFit(logCPM.filt, design = design)
#Add in genes info
fit$genes <- d.filt$genes
cont.matrix <- makeContrasts(Cel_vs_Glu,
Xyl_vs_Glu,
Xyl_vs_Cel = Xyl_vs_Glu - Cel_vs_Glu,
levels = design)
fit2 <- contrasts.fit(fit, contrasts = cont.matrix)
fit2 <- eBayes(fit2, trend = T)
summary(decideTests(fit2))
#        Cel_vs_Glu Xyl_vs_Glu Xyl_vs_Cel
# Down         1504        779       1589
# NotSig       4341       5822       4389
# Up           1663        907       1530
#### 1way test ####
res.anova <- topTable(fit2, coef = 1:2, num = Inf, sort.by = "none" )
sum(res.anova$adj.P.Val < 0.05)
#4089
Sig_index <- topTable(fit2, coef = 1:2, n=Inf, sort.by = "none")$adj.P.Val < 0.05
table(Sig_index)
# Sig_index
# FALSE  TRUE
#  3419  4089
source("input/summarizeFit.R")
#### Get pairwise ####
out.conts <- summarizeFit(fit2, addAnova = TRUE)
names(out.conts)
# [1] "gene_id"         "proteinId"       "ecNum"           "definition"
# [5] "KEGG"            "Amean"           "FC.Cel_vs_Glu"   "rawP.Cel_vs_Glu"
# [9] "FDR.Cel_vs_Glu"  "FC.Xyl_vs_Glu"   "rawP.Xyl_vs_Glu" "FDR.Xyl_vs_Glu"
# [13] "FC.Xyl_vs_Cel"   "rawP.Xyl_vs_Cel" "FDR.Xyl_vs_Cel"  "F"
# [17] "F.rawP"          "F.FDR"
sum(out.conts$F.FDR < 0.05)
#4089  - the correct numberr
colnames(out.conts)[16:18] <- c("Fstat.ANOVA","rawP.ANOVA","FDR.ANOVA")
##heatmap ####
logCPM.heat <- t(scale(t(logCPM.filt[Sig_index,])))
dim(logCPM.heat)
col.pan <- colorpanel(100, "blue", "white", "red")
x.cluster.h1 <- hclust(dist(logCPM.heat))
# x11(10,15)
setEPS()
postscript("results/Heatmap.eps", width = 6, height = 10)
heatmap.2(logCPM.heat, col=col.pan, Rowv=as.dendrogram(x.cluster.h1),Colv=FALSE, scale="none",
trace="none", dendrogram="row", cexRow=1, cexCol=0.9,labRow ="",
keysize = 0.8,lwid = c(1.4,4), lhei = c(0.8,4), colsep = c(3,6), sepcolor = "black",
margins = c(7,2),density.info = "none",
main = paste0("1-way ANOVA\nFDR < 0.05","\n",nrow(logCPM.heat), " genes" ))
dev.off()
x11(12,6)
plot(x.cluster.h1, labels = FALSE)
abline(h = 4.5 )
rowcols.h1 <- cutree(x.cluster.h1, h = 4.5)
table(rowcols.h1)
#  1   2   3   4   5   6   7
#999 552 426 896 318 368 530
#put in results and add on individual values
names(out.conts)
# [1] "gene_id"         "proteinId"       "ecNum"           "definition"
# [5] "KEGG"            "Amean"           "FC.Cel_vs_Glu"   "rawP.Cel_vs_Glu"
# [9] "FDR.Cel_vs_Glu"  "FC.Xyl_vs_Glu"   "rawP.Xyl_vs_Glu" "FDR.Xyl_vs_Glu"
# [13] "FC.Xyl_vs_Cel"   "rawP.Xyl_vs_Cel" "FDR.Xyl_vs_Cel"  "Fstat.ANOVA"
# [17] "rawP.ANOVA"      "FDR.ANOVA"
all.equal(out.conts$gene_id, rownames(logCPM.filt))
#TRUE
out.conts <- cbind(out.conts, logCPM.filt)
names(out.conts)
# [1] "gene_id"         "proteinId"       "ecNum"           "definition"
# [5] "KEGG"            "Amean"           "FC.Cel_vs_Glu"   "rawP.Cel_vs_Glu"
# [9] "FDR.Cel_vs_Glu"  "FC.Xyl_vs_Glu"   "rawP.Xyl_vs_Glu" "FDR.Xyl_vs_Glu"
# [13] "FC.Xyl_vs_Cel"   "rawP.Xyl_vs_Cel" "FDR.Xyl_vs_Cel"  "Fstat.ANOVA"
# [17] "rawP.ANOVA"      "FDR.ANOVA"       "LIPO.Cel.1"      "LIPO.Cel.2"
# [21] "LIPO.Cel.3"      "LIPO.Glu.1"      "LIPO.Glu.2"      "LIPO.Glu.3"
# [25] "LIPO.Xyl.1"      "LIPO.Xyl.2"      "LIPO.Xyl.3"
write.table(out.conts[,c(1:6, 16:18, 7:15, 19:27)],
file = "results/gene_expression.txt", row.names = FALSE, sep = "\t")
save.image("20210406.RData")
getwd()
setwd("D:/Box Sync/Manuscripts/01 - Writing - 2021 LS sugars RNAseq/lipo11557_growth/Script")
options(stringsAsFactors = F)
library(edgeR)
#library(biomaRt)
library(affycoretools)
library(limma)
library(gplots)
library(rgl)
library(Glimma)
library(rtracklayer)
library(sva)
library(ggplot2)
library(WGCNA)
library(PCAtools)
load("20210406.RData")
rm(list = ls()[!ls() %in% c("out.conts")])
head(out.conts)
colnames(out.conts)
head(rownames(out.conts))
celvsglu <- out.conts[,c("FC.Cel_vs_Glu","rawP.Cel_vs_Glu","proteinId","ecNum","definition")]
cel.filter <- celvsglu$FC.Cel_vs_Glu >= 0
celvsglu$logFC[cel.filter] <- log10(celvsglu$FC.Cel_vs_Glu[cel.filter])
celvsglu$logFC[!cel.filter] <- log10(-1/celvsglu$FC.Cel_vs_Glu[!cel.filter])
celvsglu$neg.log10.P <- -log10(celvsglu$rawP.Cel_vs_Glu)
head(celvsglu)
tail(celvsglu)
FC.low <- -2
FC.high <- 2
pval.cut <- 0.05
celvsglu$diffexpressed <- "NO"
celvsglu$diffexpressed[celvsglu$FC.Cel_vs_Glu > FC.high & celvsglu$rawP.Cel_vs_Glu < pval.cut] <- "UP"
celvsglu$diffexpressed[celvsglu$FC.Cel_vs_Glu < FC.low  & celvsglu$rawP.Cel_vs_Glu < pval.cut] <- "DOWN"
celvsglu$labels <- "."
filt <- (celvsglu$logFC > 3 | celvsglu$logFC < -2 | celvsglu$neg.log10.P > 12)
celvsglu$labels[filt] <- celvsglu$proteinId[filt]
xylvsglu <- out.conts[,c("FC.Xyl_vs_Glu","rawP.Xyl_vs_Glu","proteinId","ecNum","definition")]
xyl.filter <- xylvsglu$FC.Xyl_vs_Glu >= 0
xylvsglu$logFC[xyl.filter] <- log10(xylvsglu$FC.Xyl_vs_Glu[xyl.filter])
xylvsglu$logFC[!xyl.filter] <- log10(-1/xylvsglu$FC.Xyl_vs_Glu[!xyl.filter])
xylvsglu$neg.log10.P <- -log10(xylvsglu$rawP.Xyl_vs_Glu)
head(xylvsglu)
tail(xylvsglu)
xylvsglu$diffexpressed <- "NO"
xylvsglu$diffexpressed[xylvsglu$FC.Xyl_vs_Glu > FC.high & xylvsglu$rawP.Xyl_vs_Glu < pval.cut] <- "UP"
xylvsglu$diffexpressed[xylvsglu$FC.Xyl_vs_Glu < FC.low  & xylvsglu$rawP.Xyl_vs_Glu < pval.cut] <- "DOWN"
xylvsglu$labels <- "."
filt <- (xylvsglu$logFC > 2 | xylvsglu$logFC < -2 | xylvsglu$neg.log10.P > 10)
xylvsglu$labels[filt] <- xylvsglu$proteinId[filt]
# plot
cel.p <- ggplot(data=celvsglu, aes(x=logFC, y=neg.log10.P, col=diffexpressed, label = labels)) +
theme_minimal() + geom_point() #+ geom_text()
cel.p2 <- cel.p + geom_vline(xintercept=c(log10(-1/FC.low), log10(FC.high)), col="grey") +
geom_hline(yintercept=-log10(pval.cut), col="grey") + labs(col = "Differential expression")
cel.p3 <- cel.p2 + scale_color_manual(values=c("blue", "black", "red")) + xlab("log(Fold Change)") +
ylab("-log(pValue)") + ggtitle("Cellobiose vs Glucose") + xlim(-4,4) + ylim(0,20) +
theme(plot.title = element_text(size=12, face="bold", margin = margin(20, 20, 20, 20)),
legend.position = c(1, 1), legend.justification = c("right", "top")) +
annotate("text", x = 3, y = 7.5, label = table(celvsglu$diffexpressed)[3], col = "red") +
annotate("text", x = -2.5, y = 7.5, label = table(celvsglu$diffexpressed)[1], col = "blue")
x11(width = 6, height = 6)
plot(cel.p3)
xyl.p <- ggplot(data=xylvsglu, aes(x=logFC, y=neg.log10.P, col=diffexpressed, label = labels)) +
theme_minimal()+ geom_point() #+ geom_text()
xyl.p2 <- xyl.p + geom_vline(xintercept=c(log10(-1/FC.low), log10(FC.high)), col="grey") +
geom_hline(yintercept=-log10(pval.cut), col="grey") + labs(col = "Differential expression")
xyl.p3 <- xyl.p2 + scale_color_manual(values=c("blue", "black", "red")) + xlab("log(Fold Change)") +
ylab("-log(pValue)") + ggtitle("Xylose vs Glucose") + xlim(-4,4) + ylim(0,20) +
theme(plot.title = element_text(size=12, face="bold", margin = margin(20, 20, 20, 20)),
legend.position = c(1, 1), legend.justification = c("right", "top")) +
annotate("text", x = 3, y = 7.5, label = table(xylvsglu$diffexpressed)[3], col = "red") +
annotate("text", x = -2, y = 7.5, label = table(xylvsglu$diffexpressed)[1], col = "blue")
x11(width = 6, height = 6)
plot(xyl.p3)
summary(celvsglu$logFC)
summary(xylvsglu$logFC)
table(celvsglu$diffexpressed)
# DOWN   NO   UP
# 374 6283  851
table(xylvsglu$diffexpressed) # [1] - down, [3] - up
# DOWN   NO   UP
# 120 6996  392
xylvsglu[xylvsglu$logFC == -Inf,]
out.conts[out.conts$proteinId == 64475,]
save.image("20210708_Volcanoplot.Rdata")
